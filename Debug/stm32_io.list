
stm32_io.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fd4  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080011a4  080011a4  000111a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011bc  080011bc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080011bc  080011bc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011bc  080011bc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011bc  080011bc  000111bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011c0  080011c0  000111c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080011c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  080011c8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080011c8  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002cdd  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e03  00000000  00000000  00022d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000450  00000000  00000000  00023b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003d8  00000000  00000000  00023f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000af41  00000000  00000000  00024338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003358  00000000  00000000  0002f279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003aa66  00000000  00000000  000325d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006d037  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001050  00000000  00000000  0006d08c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000004 	.word	0x20000004
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800118c 	.word	0x0800118c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000008 	.word	0x20000008
 800020c:	0800118c 	.word	0x0800118c

08000210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <__NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	2b00      	cmp	r3, #0
 8000284:	db0b      	blt.n	800029e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f003 021f 	and.w	r2, r3, #31
 800028c:	4906      	ldr	r1, [pc, #24]	; (80002a8 <__NVIC_EnableIRQ+0x34>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	095b      	lsrs	r3, r3, #5
 8000294:	2001      	movs	r0, #1
 8000296:	fa00 f202 	lsl.w	r2, r0, r2
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	; (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	; (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000300:	b480      	push	{r7}
 8000302:	b089      	sub	sp, #36	; 0x24
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f003 0307 	and.w	r3, r3, #7
 8000312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	f1c3 0307 	rsb	r3, r3, #7
 800031a:	2b04      	cmp	r3, #4
 800031c:	bf28      	it	cs
 800031e:	2304      	movcs	r3, #4
 8000320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3304      	adds	r3, #4
 8000326:	2b06      	cmp	r3, #6
 8000328:	d902      	bls.n	8000330 <NVIC_EncodePriority+0x30>
 800032a:	69fb      	ldr	r3, [r7, #28]
 800032c:	3b03      	subs	r3, #3
 800032e:	e000      	b.n	8000332 <NVIC_EncodePriority+0x32>
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000334:	f04f 32ff 	mov.w	r2, #4294967295
 8000338:	69bb      	ldr	r3, [r7, #24]
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	43da      	mvns	r2, r3
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	401a      	ands	r2, r3
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000348:	f04f 31ff 	mov.w	r1, #4294967295
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	43d9      	mvns	r1, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	4313      	orrs	r3, r2
         );
}
 800035a:	4618      	mov	r0, r3
 800035c:	3724      	adds	r7, #36	; 0x24
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000368:	4b04      	ldr	r3, [pc, #16]	; (800037c <LL_RCC_HSE_Enable+0x18>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a03      	ldr	r2, [pc, #12]	; (800037c <LL_RCC_HSE_Enable+0x18>)
 800036e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000372:	6013      	str	r3, [r2, #0]
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr
 800037c:	40021000 	.word	0x40021000

08000380 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <LL_RCC_HSE_IsReady+0x20>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800038c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000390:	bf0c      	ite	eq
 8000392:	2301      	moveq	r3, #1
 8000394:	2300      	movne	r3, #0
 8000396:	b2db      	uxtb	r3, r3
}
 8000398:	4618      	mov	r0, r3
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	40021000 	.word	0x40021000

080003a4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <LL_RCC_SetSysClkSource+0x24>)
 80003ae:	685b      	ldr	r3, [r3, #4]
 80003b0:	f023 0203 	bic.w	r2, r3, #3
 80003b4:	4904      	ldr	r1, [pc, #16]	; (80003c8 <LL_RCC_SetSysClkSource+0x24>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4313      	orrs	r3, r2
 80003ba:	604b      	str	r3, [r1, #4]
}
 80003bc:	bf00      	nop
 80003be:	370c      	adds	r7, #12
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000

080003cc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003d0:	4b03      	ldr	r3, [pc, #12]	; (80003e0 <LL_RCC_GetSysClkSource+0x14>)
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	f003 030c 	and.w	r3, r3, #12
}
 80003d8:	4618      	mov	r0, r3
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr
 80003e0:	40021000 	.word	0x40021000

080003e4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <LL_RCC_SetAHBPrescaler+0x24>)
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80003f4:	4904      	ldr	r1, [pc, #16]	; (8000408 <LL_RCC_SetAHBPrescaler+0x24>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	604b      	str	r3, [r1, #4]
}
 80003fc:	bf00      	nop
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000

0800040c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800041c:	4904      	ldr	r1, [pc, #16]	; (8000430 <LL_RCC_SetAPB1Prescaler+0x24>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4313      	orrs	r3, r2
 8000422:	604b      	str	r3, [r1, #4]
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40021000 	.word	0x40021000

08000434 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <LL_RCC_SetAPB2Prescaler+0x24>)
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000444:	4904      	ldr	r1, [pc, #16]	; (8000458 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4313      	orrs	r3, r2
 800044a:	604b      	str	r3, [r1, #4]
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	40021000 	.word	0x40021000

0800045c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000464:	4b08      	ldr	r3, [pc, #32]	; (8000488 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000466:	69da      	ldr	r2, [r3, #28]
 8000468:	4907      	ldr	r1, [pc, #28]	; (8000488 <LL_APB1_GRP1_EnableClock+0x2c>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4313      	orrs	r3, r2
 800046e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000472:	69da      	ldr	r2, [r3, #28]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4013      	ands	r3, r2
 8000478:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800047a:	68fb      	ldr	r3, [r7, #12]
}
 800047c:	bf00      	nop
 800047e:	3714      	adds	r7, #20
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000

0800048c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000494:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000496:	699a      	ldr	r2, [r3, #24]
 8000498:	4907      	ldr	r1, [pc, #28]	; (80004b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4313      	orrs	r3, r2
 800049e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004a2:	699a      	ldr	r2, [r3, #24]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4013      	ands	r3, r2
 80004a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004aa:	68fb      	ldr	r3, [r7, #12]
}
 80004ac:	bf00      	nop
 80004ae:	3714      	adds	r7, #20
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000

080004bc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	60da      	str	r2, [r3, #12]
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr

080004da <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80004da:	b480      	push	{r7}
 80004dc:	b083      	sub	sp, #12
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	691b      	ldr	r3, [r3, #16]
 80004e6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	615a      	str	r2, [r3, #20]
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	f043 0220 	orr.w	r2, r3, #32
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	60da      	str	r2, [r3, #12]
}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr

08000522 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	0a1b      	lsrs	r3, r3, #8
 8000530:	b29a      	uxth	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	615a      	str	r2, [r3, #20]
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8000544:	4b07      	ldr	r3, [pc, #28]	; (8000564 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	4a06      	ldr	r2, [pc, #24]	; (8000564 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800054a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800054e:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000556:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800055a:	6053      	str	r3, [r2, #4]
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	40010000 	.word	0x40010000

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 800056c:	2001      	movs	r0, #1
 800056e:	f7ff ff8d 	bl	800048c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000572:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000576:	f7ff ff71 	bl	800045c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057a:	2003      	movs	r0, #3
 800057c:	f7ff fe48 	bl	8000210 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000580:	f7ff fe6a 	bl	8000258 <__NVIC_GetPriorityGrouping>
 8000584:	4603      	mov	r3, r0
 8000586:	2200      	movs	r2, #0
 8000588:	210f      	movs	r1, #15
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff feb8 	bl	8000300 <NVIC_EncodePriority>
 8000590:	4603      	mov	r3, r0
 8000592:	4619      	mov	r1, r3
 8000594:	f04f 30ff 	mov.w	r0, #4294967295
 8000598:	f7ff fe88 	bl	80002ac <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 800059c:	f7ff ffd0 	bl	8000540 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f80c 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f8f6 	bl	8000794 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a8:	f000 f82e 	bl	8000608 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005ac:	f000 f886 	bl	80006bc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_USART_EnableIT_RXNE(USART3);
 80005b0:	4801      	ldr	r0, [pc, #4]	; (80005b8 <main+0x50>)
 80005b2:	f7ff ffa7 	bl	8000504 <LL_USART_EnableIT_RXNE>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <main+0x4e>
 80005b8:	40004800 	.word	0x40004800

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  LL_RCC_HSE_Enable();
 80005c0:	f7ff fed0 	bl	8000364 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80005c4:	bf00      	nop
 80005c6:	f7ff fedb 	bl	8000380 <LL_RCC_HSE_IsReady>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d1fa      	bne.n	80005c6 <SystemClock_Config+0xa>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80005d0:	2000      	movs	r0, #0
 80005d2:	f7ff ff07 	bl	80003e4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f7ff ff18 	bl	800040c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80005dc:	2000      	movs	r0, #0
 80005de:	f7ff ff29 	bl	8000434 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 80005e2:	2001      	movs	r0, #1
 80005e4:	f7ff fede 	bl	80003a4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE)
 80005e8:	bf00      	nop
 80005ea:	f7ff feef 	bl	80003cc <LL_RCC_GetSysClkSource>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b04      	cmp	r3, #4
 80005f2:	d1fa      	bne.n	80005ea <SystemClock_Config+0x2e>
  {

  }
  LL_Init1msTick(24000000);
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <SystemClock_Config+0x48>)
 80005f6:	f000 fd89 	bl	800110c <LL_Init1msTick>
  LL_SetSystemCoreClock(24000000);
 80005fa:	4802      	ldr	r0, [pc, #8]	; (8000604 <SystemClock_Config+0x48>)
 80005fc:	f000 fd94 	bl	8001128 <LL_SetSystemCoreClock>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	016e3600 	.word	0x016e3600

08000608 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08c      	sub	sp, #48	; 0x30
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]
 800061e:	615a      	str	r2, [r3, #20]
 8000620:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	463b      	mov	r3, r7
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000630:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000634:	f7ff ff12 	bl	800045c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000638:	2004      	movs	r0, #4
 800063a:	f7ff ff27 	bl	800048c <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800063e:	f240 4304 	movw	r3, #1028	; 0x404
 8000642:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000644:	2309      	movs	r3, #9
 8000646:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000648:	2303      	movs	r3, #3
 800064a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	463b      	mov	r3, r7
 8000652:	4619      	mov	r1, r3
 8000654:	4816      	ldr	r0, [pc, #88]	; (80006b0 <MX_USART2_UART_Init+0xa8>)
 8000656:	f000 fa74 	bl	8000b42 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800065a:	f640 0308 	movw	r3, #2056	; 0x808
 800065e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000660:	2304      	movs	r3, #4
 8000662:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	4811      	ldr	r0, [pc, #68]	; (80006b0 <MX_USART2_UART_Init+0xa8>)
 800066a:	f000 fa6a 	bl	8000b42 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 100000;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_USART2_UART_Init+0xac>)
 8000670:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000676:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_2;
 8000678:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800067c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 800067e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000682:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000684:	230c      	movs	r3, #12
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000688:	2300      	movs	r3, #0
 800068a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800068c:	2300      	movs	r3, #0
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	4619      	mov	r1, r3
 8000696:	4808      	ldr	r0, [pc, #32]	; (80006b8 <MX_USART2_UART_Init+0xb0>)
 8000698:	f000 fcba 	bl	8001010 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800069c:	4806      	ldr	r0, [pc, #24]	; (80006b8 <MX_USART2_UART_Init+0xb0>)
 800069e:	f7ff ff1c 	bl	80004da <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_USART2_UART_Init+0xb0>)
 80006a4:	f7ff ff0a 	bl	80004bc <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	3730      	adds	r7, #48	; 0x30
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40010800 	.word	0x40010800
 80006b4:	000186a0 	.word	0x000186a0
 80006b8:	40004400 	.word	0x40004400

080006bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08c      	sub	sp, #48	; 0x30
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]
 80006d2:	615a      	str	r2, [r3, #20]
 80006d4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80006e4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80006e8:	f7ff feb8 	bl	800045c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80006ec:	2008      	movs	r0, #8
 80006ee:	f7ff fecd 	bl	800048c <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <MX_USART3_UART_Init+0xc4>)
 80006f4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80006f6:	2309      	movs	r3, #9
 80006f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80006fa:	2303      	movs	r3, #3
 80006fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000702:	463b      	mov	r3, r7
 8000704:	4619      	mov	r1, r3
 8000706:	481f      	ldr	r0, [pc, #124]	; (8000784 <MX_USART3_UART_Init+0xc8>)
 8000708:	f000 fa1b 	bl	8000b42 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <MX_USART3_UART_Init+0xcc>)
 800070e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000710:	2304      	movs	r3, #4
 8000712:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000714:	463b      	mov	r3, r7
 8000716:	4619      	mov	r1, r3
 8000718:	481a      	ldr	r0, [pc, #104]	; (8000784 <MX_USART3_UART_Init+0xc8>)
 800071a:	f000 fa12 	bl	8000b42 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800071e:	f7ff fd9b 	bl	8000258 <__NVIC_GetPriorityGrouping>
 8000722:	4603      	mov	r3, r0
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff fde9 	bl	8000300 <NVIC_EncodePriority>
 800072e:	4603      	mov	r3, r0
 8000730:	4619      	mov	r1, r3
 8000732:	2027      	movs	r0, #39	; 0x27
 8000734:	f7ff fdba 	bl	80002ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8000738:	2027      	movs	r0, #39	; 0x27
 800073a:	f7ff fd9b 	bl	8000274 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 100000;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_USART3_UART_Init+0xd0>)
 8000740:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000746:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_2;
 8000748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 800074e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000752:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8000754:	2304      	movs	r3, #4
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000758:	2300      	movs	r3, #0
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800075c:	2300      	movs	r3, #0
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	480a      	ldr	r0, [pc, #40]	; (8000790 <MX_USART3_UART_Init+0xd4>)
 8000768:	f000 fc52 	bl	8001010 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800076c:	4808      	ldr	r0, [pc, #32]	; (8000790 <MX_USART3_UART_Init+0xd4>)
 800076e:	f7ff feb4 	bl	80004da <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8000772:	4807      	ldr	r0, [pc, #28]	; (8000790 <MX_USART3_UART_Init+0xd4>)
 8000774:	f7ff fea2 	bl	80004bc <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	3730      	adds	r7, #48	; 0x30
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	04040004 	.word	0x04040004
 8000784:	40010c00 	.word	0x40010c00
 8000788:	04080008 	.word	0x04080008
 800078c:	000186a0 	.word	0x000186a0
 8000790:	40004800 	.word	0x40004800

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80007a8:	2020      	movs	r0, #32
 80007aa:	f7ff fe6f 	bl	800048c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80007ae:	2004      	movs	r0, #4
 80007b0:	f7ff fe6c 	bl	800048c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80007b4:	2008      	movs	r0, #8
 80007b6:	f7ff fe69 	bl	800048c <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14|LL_GPIO_PIN_15);
 80007ba:	490a      	ldr	r1, [pc, #40]	; (80007e4 <MX_GPIO_Init+0x50>)
 80007bc:	480a      	ldr	r0, [pc, #40]	; (80007e8 <MX_GPIO_Init+0x54>)
 80007be:	f7ff feb0 	bl	8000522 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_GPIO_Init+0x50>)
 80007c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007c6:	2301      	movs	r3, #1
 80007c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007ca:	2302      	movs	r3, #2
 80007cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4619      	mov	r1, r3
 80007d6:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_GPIO_Init+0x54>)
 80007d8:	f000 f9b3 	bl	8000b42 <LL_GPIO_Init>

}
 80007dc:	bf00      	nop
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	04c000c0 	.word	0x04c000c0
 80007e8:	40010c00 	.word	0x40010c00

080007ec <LL_USART_IsActiveFlag_PE>:
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	bf0c      	ite	eq
 8000800:	2301      	moveq	r3, #1
 8000802:	2300      	movne	r3, #0
 8000804:	b2db      	uxtb	r3, r3
}
 8000806:	4618      	mov	r0, r3
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <LL_USART_IsActiveFlag_FE>:
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f003 0302 	and.w	r3, r3, #2
 8000820:	2b02      	cmp	r3, #2
 8000822:	bf0c      	ite	eq
 8000824:	2301      	moveq	r3, #1
 8000826:	2300      	movne	r3, #0
 8000828:	b2db      	uxtb	r3, r3
}
 800082a:	4618      	mov	r0, r3
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <LL_USART_IsActiveFlag_ORE>:
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f003 0308 	and.w	r3, r3, #8
 8000844:	2b08      	cmp	r3, #8
 8000846:	bf0c      	ite	eq
 8000848:	2301      	moveq	r3, #1
 800084a:	2300      	movne	r3, #0
 800084c:	b2db      	uxtb	r3, r3
}
 800084e:	4618      	mov	r0, r3
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <LL_USART_IsActiveFlag_RXNE>:
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f003 0320 	and.w	r3, r3, #32
 8000868:	2b20      	cmp	r3, #32
 800086a:	bf0c      	ite	eq
 800086c:	2301      	moveq	r3, #1
 800086e:	2300      	movne	r3, #0
 8000870:	b2db      	uxtb	r3, r3
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <LL_USART_ReceiveData9>:
  * @rmtoll DR           DR            LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	b29b      	uxth	r3, r3
 800088a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800088e:	b29b      	uxth	r3, r3
}
 8000890:	4618      	mov	r0, r3
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <LL_USART_TransmitData9>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0x1FF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData9(USART_TypeDef *USARTx, uint16_t Value)
{
 800089a:	b480      	push	{r7}
 800089c:	b083      	sub	sp, #12
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	460b      	mov	r3, r1
 80008a4:	807b      	strh	r3, [r7, #2]
  USARTx->DR = Value & 0x1FFU;
 80008a6:	887b      	ldrh	r3, [r7, #2]
 80008a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	605a      	str	r2, [r3, #4]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr

080008ba <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008be:	e7fe      	b.n	80008be <NMI_Handler+0x4>

080008c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <HardFault_Handler+0x4>

080008c6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <MemManage_Handler+0x4>

080008cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <BusFault_Handler+0x4>

080008d2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <UsageFault_Handler+0x4>

080008d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	 uint8_t buff;
	 if (LL_USART_IsActiveFlag_ORE(USART3)) // Over run error
 800090e:	4819      	ldr	r0, [pc, #100]	; (8000974 <USART3_IRQHandler+0x6c>)
 8000910:	f7ff ff90 	bl	8000834 <LL_USART_IsActiveFlag_ORE>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d003      	beq.n	8000922 <USART3_IRQHandler+0x1a>
	  {
	    LL_USART_ReceiveData9(USART3); // read away
 800091a:	4816      	ldr	r0, [pc, #88]	; (8000974 <USART3_IRQHandler+0x6c>)
 800091c:	f7ff ffae 	bl	800087c <LL_USART_ReceiveData9>

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000920:	e024      	b.n	800096c <USART3_IRQHandler+0x64>
	  else if (LL_USART_IsActiveFlag_PE(USART3)) // Parity error
 8000922:	4814      	ldr	r0, [pc, #80]	; (8000974 <USART3_IRQHandler+0x6c>)
 8000924:	f7ff ff62 	bl	80007ec <LL_USART_IsActiveFlag_PE>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d003      	beq.n	8000936 <USART3_IRQHandler+0x2e>
	    LL_USART_ReceiveData9(USART3); // read and discard
 800092e:	4811      	ldr	r0, [pc, #68]	; (8000974 <USART3_IRQHandler+0x6c>)
 8000930:	f7ff ffa4 	bl	800087c <LL_USART_ReceiveData9>
}
 8000934:	e01a      	b.n	800096c <USART3_IRQHandler+0x64>
	  else if (LL_USART_IsActiveFlag_FE(USART3)) // Framing error
 8000936:	480f      	ldr	r0, [pc, #60]	; (8000974 <USART3_IRQHandler+0x6c>)
 8000938:	f7ff ff6a 	bl	8000810 <LL_USART_IsActiveFlag_FE>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d003      	beq.n	800094a <USART3_IRQHandler+0x42>
	    LL_USART_ReceiveData9(USART3); // read away
 8000942:	480c      	ldr	r0, [pc, #48]	; (8000974 <USART3_IRQHandler+0x6c>)
 8000944:	f7ff ff9a 	bl	800087c <LL_USART_ReceiveData9>
}
 8000948:	e010      	b.n	800096c <USART3_IRQHandler+0x64>
	  else if (LL_USART_IsActiveFlag_RXNE(USART3))
 800094a:	480a      	ldr	r0, [pc, #40]	; (8000974 <USART3_IRQHandler+0x6c>)
 800094c:	f7ff ff84 	bl	8000858 <LL_USART_IsActiveFlag_RXNE>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d00a      	beq.n	800096c <USART3_IRQHandler+0x64>
	    buff = (uint8_t)LL_USART_ReceiveData9(USART3);
 8000956:	4807      	ldr	r0, [pc, #28]	; (8000974 <USART3_IRQHandler+0x6c>)
 8000958:	f7ff ff90 	bl	800087c <LL_USART_ReceiveData9>
 800095c:	4603      	mov	r3, r0
 800095e:	71fb      	strb	r3, [r7, #7]
	    LL_USART_TransmitData9(USART2,buff);
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	b29b      	uxth	r3, r3
 8000964:	4619      	mov	r1, r3
 8000966:	4804      	ldr	r0, [pc, #16]	; (8000978 <USART3_IRQHandler+0x70>)
 8000968:	f7ff ff97 	bl	800089a <LL_USART_TransmitData9>
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40004800 	.word	0x40004800
 8000978:	40004400 	.word	0x40004400

0800097c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr

08000988 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800098a:	490d      	ldr	r1, [pc, #52]	; (80009c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800098c:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009a0:	4c0a      	ldr	r4, [pc, #40]	; (80009cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009ae:	f7ff ffe5 	bl	800097c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b2:	f000 fbc7 	bl	8001144 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009b6:	f7ff fdd7 	bl	8000568 <main>
  bx lr
 80009ba:	4770      	bx	lr
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80009c4:	080011c4 	.word	0x080011c4
  ldr r2, =_sbss
 80009c8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80009cc:	20000020 	.word	0x20000020

080009d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC1_IRQHandler>

080009d2 <LL_GPIO_SetPinMode>:
{
 80009d2:	b490      	push	{r4, r7}
 80009d4:	b088      	sub	sp, #32
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	60f8      	str	r0, [r7, #12]
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	461a      	mov	r2, r3
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	0e1b      	lsrs	r3, r3, #24
 80009e6:	4413      	add	r3, r2
 80009e8:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80009ea:	6822      	ldr	r2, [r4, #0]
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	fa93 f3a3 	rbit	r3, r3
 80009f6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	fab3 f383 	clz	r3, r3
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	210f      	movs	r1, #15
 8000a04:	fa01 f303 	lsl.w	r3, r1, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	fa93 f3a3 	rbit	r3, r3
 8000a16:	61bb      	str	r3, [r7, #24]
  return result;
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	fab3 f383 	clz	r3, r3
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	fa01 f303 	lsl.w	r3, r1, r3
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	6023      	str	r3, [r4, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	3720      	adds	r7, #32
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc90      	pop	{r4, r7}
 8000a34:	4770      	bx	lr

08000a36 <LL_GPIO_SetPinSpeed>:
{
 8000a36:	b490      	push	{r4, r7}
 8000a38:	b088      	sub	sp, #32
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	60f8      	str	r0, [r7, #12]
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	461a      	mov	r2, r3
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	0e1b      	lsrs	r3, r3, #24
 8000a4a:	4413      	add	r3, r2
 8000a4c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8000a4e:	6822      	ldr	r2, [r4, #0]
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	fa93 f3a3 	rbit	r3, r3
 8000a5a:	613b      	str	r3, [r7, #16]
  return result;
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	fab3 f383 	clz	r3, r3
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	2103      	movs	r1, #3
 8000a68:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	401a      	ands	r2, r3
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	fa93 f3a3 	rbit	r3, r3
 8000a7a:	61bb      	str	r3, [r7, #24]
  return result;
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	fab3 f383 	clz	r3, r3
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	6023      	str	r3, [r4, #0]
}
 8000a90:	bf00      	nop
 8000a92:	3720      	adds	r7, #32
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc90      	pop	{r4, r7}
 8000a98:	4770      	bx	lr

08000a9a <LL_GPIO_SetPinOutputType>:
{
 8000a9a:	b490      	push	{r4, r7}
 8000a9c:	b088      	sub	sp, #32
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	0e1b      	lsrs	r3, r3, #24
 8000aae:	4413      	add	r3, r2
 8000ab0:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000ab2:	6822      	ldr	r2, [r4, #0]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa93 f3a3 	rbit	r3, r3
 8000abe:	613b      	str	r3, [r7, #16]
  return result;
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	fab3 f383 	clz	r3, r3
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	2104      	movs	r1, #4
 8000acc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	fa93 f3a3 	rbit	r3, r3
 8000ade:	61bb      	str	r3, [r7, #24]
  return result;
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	fab3 f383 	clz	r3, r3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	fa01 f303 	lsl.w	r3, r1, r3
 8000af0:	4313      	orrs	r3, r2
 8000af2:	6023      	str	r3, [r4, #0]
}
 8000af4:	bf00      	nop
 8000af6:	3720      	adds	r7, #32
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc90      	pop	{r4, r7}
 8000afc:	4770      	bx	lr

08000afe <LL_GPIO_SetPinPull>:
{
 8000afe:	b480      	push	{r7}
 8000b00:	b087      	sub	sp, #28
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	60f8      	str	r0, [r7, #12]
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	68da      	ldr	r2, [r3, #12]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	43db      	mvns	r3, r3
 8000b14:	401a      	ands	r2, r3
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa93 f3a3 	rbit	r3, r3
 8000b22:	613b      	str	r3, [r7, #16]
  return result;
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	fab3 f383 	clz	r3, r3
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	408b      	lsls	r3, r1
 8000b32:	431a      	orrs	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	60da      	str	r2, [r3, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	371c      	adds	r7, #28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr

08000b42 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b088      	sub	sp, #32
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	0c1b      	lsrs	r3, r3, #16
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	fa93 f3a3 	rbit	r3, r3
 8000b60:	60fb      	str	r3, [r7, #12]
  return result;
 8000b62:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8000b64:	fab3 f383 	clz	r3, r3
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8000b6c:	e044      	b.n	8000bf8 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	409a      	lsls	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	4013      	ands	r3, r2
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d03a      	beq.n	8000bf2 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	2b07      	cmp	r3, #7
 8000b80:	d806      	bhi.n	8000b90 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8000b82:	f240 1201 	movw	r2, #257	; 0x101
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	61bb      	str	r3, [r7, #24]
 8000b8e:	e008      	b.n	8000ba2 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	3b08      	subs	r3, #8
 8000b94:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ba0:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2b08      	cmp	r3, #8
 8000ba8:	d106      	bne.n	8000bb8 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	69b9      	ldr	r1, [r7, #24]
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff ffa3 	bl	8000afe <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	69b9      	ldr	r1, [r7, #24]
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ff06 	bl	80009d2 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d003      	beq.n	8000bd6 <LL_GPIO_Init+0x94>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2b09      	cmp	r3, #9
 8000bd4:	d10d      	bne.n	8000bf2 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	69b9      	ldr	r1, [r7, #24]
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff ff29 	bl	8000a36 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	461a      	mov	r2, r3
 8000bea:	69b9      	ldr	r1, [r7, #24]
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff54 	bl	8000a9a <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1b4      	bne.n	8000b6e <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3720      	adds	r7, #32
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <LL_RCC_GetSysClkSource>:
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <LL_RCC_GetSysClkSource+0x14>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 030c 	and.w	r3, r3, #12
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	40021000 	.word	0x40021000

08000c28 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <LL_RCC_GetAHBPrescaler+0x14>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	40021000 	.word	0x40021000

08000c40 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	40021000 	.word	0x40021000

08000c58 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <LL_RCC_GetAPB2Prescaler+0x14>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	40021000 	.word	0x40021000

08000c70 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <LL_RCC_PLL_GetMainSource+0x14>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	40021000 	.word	0x40021000

08000c88 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <LL_RCC_PLL_GetMultiplicator+0x14>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <LL_RCC_PLL_GetPrediv+0x14>)
 8000ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca8:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000cc0:	f000 f820 	bl	8000d04 <RCC_GetSystemClockFreq>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f840 	bl	8000d54 <RCC_GetHCLKClockFreq>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f84e 	bl	8000d80 <RCC_GetPCLK1ClockFreq>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f85a 	bl	8000da8 <RCC_GetPCLK2ClockFreq>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	60da      	str	r2, [r3, #12]
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000d0e:	f7ff ff7f 	bl	8000c10 <LL_RCC_GetSysClkSource>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b08      	cmp	r3, #8
 8000d16:	d00c      	beq.n	8000d32 <RCC_GetSystemClockFreq+0x2e>
 8000d18:	2b08      	cmp	r3, #8
 8000d1a:	d80e      	bhi.n	8000d3a <RCC_GetSystemClockFreq+0x36>
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <RCC_GetSystemClockFreq+0x22>
 8000d20:	2b04      	cmp	r3, #4
 8000d22:	d003      	beq.n	8000d2c <RCC_GetSystemClockFreq+0x28>
 8000d24:	e009      	b.n	8000d3a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <RCC_GetSystemClockFreq+0x48>)
 8000d28:	607b      	str	r3, [r7, #4]
      break;
 8000d2a:	e009      	b.n	8000d40 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <RCC_GetSystemClockFreq+0x4c>)
 8000d2e:	607b      	str	r3, [r7, #4]
      break;
 8000d30:	e006      	b.n	8000d40 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000d32:	f000 f84d 	bl	8000dd0 <RCC_PLL_GetFreqDomain_SYS>
 8000d36:	6078      	str	r0, [r7, #4]
      break;
 8000d38:	e002      	b.n	8000d40 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8000d3a:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <RCC_GetSystemClockFreq+0x48>)
 8000d3c:	607b      	str	r3, [r7, #4]
      break;
 8000d3e:	bf00      	nop
  }

  return frequency;
 8000d40:	687b      	ldr	r3, [r7, #4]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	007a1200 	.word	0x007a1200
 8000d50:	016e3600 	.word	0x016e3600

08000d54 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000d5c:	f7ff ff64 	bl	8000c28 <LL_RCC_GetAHBPrescaler>
 8000d60:	4603      	mov	r3, r0
 8000d62:	091b      	lsrs	r3, r3, #4
 8000d64:	f003 030f 	and.w	r3, r3, #15
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <RCC_GetHCLKClockFreq+0x28>)
 8000d6a:	5cd3      	ldrb	r3, [r2, r3]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	40d3      	lsrs	r3, r2
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	080011a4 	.word	0x080011a4

08000d80 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000d88:	f7ff ff5a 	bl	8000c40 <LL_RCC_GetAPB1Prescaler>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	0a1b      	lsrs	r3, r3, #8
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <RCC_GetPCLK1ClockFreq+0x24>)
 8000d92:	5cd3      	ldrb	r3, [r2, r3]
 8000d94:	461a      	mov	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	40d3      	lsrs	r3, r2
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	080011b4 	.word	0x080011b4

08000da8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000db0:	f7ff ff52 	bl	8000c58 <LL_RCC_GetAPB2Prescaler>
 8000db4:	4603      	mov	r3, r0
 8000db6:	0adb      	lsrs	r3, r3, #11
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <RCC_GetPCLK2ClockFreq+0x24>)
 8000dba:	5cd3      	ldrb	r3, [r2, r3]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	40d3      	lsrs	r3, r2
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	080011b4 	.word	0x080011b4

08000dd0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000dde:	f7ff ff47 	bl	8000c70 <LL_RCC_PLL_GetMainSource>
 8000de2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d004      	beq.n	8000df4 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df0:	d003      	beq.n	8000dfa <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8000df2:	e00b      	b.n	8000e0c <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8000df4:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8000df6:	607b      	str	r3, [r7, #4]
      break;
 8000df8:	e00b      	b.n	8000e12 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8000dfa:	f7ff ff51 	bl	8000ca0 <LL_RCC_PLL_GetPrediv>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	3301      	adds	r3, #1
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8000e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e08:	607b      	str	r3, [r7, #4]
      break;
 8000e0a:	e002      	b.n	8000e12 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8000e0e:	607b      	str	r3, [r7, #4]
      break;
 8000e10:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8000e12:	f7ff ff39 	bl	8000c88 <LL_RCC_PLL_GetMultiplicator>
 8000e16:	4603      	mov	r3, r0
 8000e18:	0c9b      	lsrs	r3, r3, #18
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	fb02 f303 	mul.w	r3, r2, r3
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	003d0900 	.word	0x003d0900
 8000e30:	016e3600 	.word	0x016e3600

08000e34 <LL_USART_IsEnabled>:
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e48:	bf0c      	ite	eq
 8000e4a:	2301      	moveq	r3, #1
 8000e4c:	2300      	movne	r3, #0
 8000e4e:	b2db      	uxtb	r3, r3
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr

08000e5a <LL_USART_SetStopBitsLength>:
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	611a      	str	r2, [r3, #16]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr

08000e7e <LL_USART_SetHWFlowCtrl>:
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
 8000e86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	431a      	orrs	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	615a      	str	r2, [r3, #20]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
	...

08000ea4 <LL_USART_SetBaudRate>:
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000eb8:	d152      	bne.n	8000f60 <LL_USART_SetBaudRate+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	4413      	add	r3, r2
 8000ec2:	009a      	lsls	r2, r3, #2
 8000ec4:	441a      	add	r2, r3
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	4a4f      	ldr	r2, [pc, #316]	; (800100c <LL_USART_SetBaudRate+0x168>)
 8000ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed4:	095b      	lsrs	r3, r3, #5
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	011b      	lsls	r3, r3, #4
 8000eda:	b299      	uxth	r1, r3
 8000edc:	68ba      	ldr	r2, [r7, #8]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	009a      	lsls	r2, r3, #2
 8000ee6:	441a      	add	r2, r3
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ef0:	4b46      	ldr	r3, [pc, #280]	; (800100c <LL_USART_SetBaudRate+0x168>)
 8000ef2:	fba3 0302 	umull	r0, r3, r3, r2
 8000ef6:	095b      	lsrs	r3, r3, #5
 8000ef8:	2064      	movs	r0, #100	; 0x64
 8000efa:	fb00 f303 	mul.w	r3, r0, r3
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	3332      	adds	r3, #50	; 0x32
 8000f04:	4a41      	ldr	r2, [pc, #260]	; (800100c <LL_USART_SetBaudRate+0x168>)
 8000f06:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0a:	095b      	lsrs	r3, r3, #5
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	440b      	add	r3, r1
 8000f1a:	b299      	uxth	r1, r3
 8000f1c:	68ba      	ldr	r2, [r7, #8]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	009a      	lsls	r2, r3, #2
 8000f26:	441a      	add	r2, r3
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f30:	4b36      	ldr	r3, [pc, #216]	; (800100c <LL_USART_SetBaudRate+0x168>)
 8000f32:	fba3 0302 	umull	r0, r3, r3, r2
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	2064      	movs	r0, #100	; 0x64
 8000f3a:	fb00 f303 	mul.w	r3, r0, r3
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	3332      	adds	r3, #50	; 0x32
 8000f44:	4a31      	ldr	r2, [pc, #196]	; (800100c <LL_USART_SetBaudRate+0x168>)
 8000f46:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	440b      	add	r3, r1
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	609a      	str	r2, [r3, #8]
}
 8000f5e:	e04f      	b.n	8001000 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000f60:	68ba      	ldr	r2, [r7, #8]
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	009a      	lsls	r2, r3, #2
 8000f6a:	441a      	add	r2, r3
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f74:	4a25      	ldr	r2, [pc, #148]	; (800100c <LL_USART_SetBaudRate+0x168>)
 8000f76:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7a:	095b      	lsrs	r3, r3, #5
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	011b      	lsls	r3, r3, #4
 8000f80:	b299      	uxth	r1, r3
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	009a      	lsls	r2, r3, #2
 8000f8c:	441a      	add	r2, r3
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <LL_USART_SetBaudRate+0x168>)
 8000f98:	fba3 0302 	umull	r0, r3, r3, r2
 8000f9c:	095b      	lsrs	r3, r3, #5
 8000f9e:	2064      	movs	r0, #100	; 0x64
 8000fa0:	fb00 f303 	mul.w	r3, r0, r3
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	3332      	adds	r3, #50	; 0x32
 8000faa:	4a18      	ldr	r2, [pc, #96]	; (800100c <LL_USART_SetBaudRate+0x168>)
 8000fac:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb0:	095b      	lsrs	r3, r3, #5
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	440b      	add	r3, r1
 8000fbc:	b299      	uxth	r1, r3
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	009a      	lsls	r2, r3, #2
 8000fc8:	441a      	add	r2, r3
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	fbb2 f2f3 	udiv	r2, r2, r3
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <LL_USART_SetBaudRate+0x168>)
 8000fd4:	fba3 0302 	umull	r0, r3, r3, r2
 8000fd8:	095b      	lsrs	r3, r3, #5
 8000fda:	2064      	movs	r0, #100	; 0x64
 8000fdc:	fb00 f303 	mul.w	r3, r0, r3
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	011b      	lsls	r3, r3, #4
 8000fe4:	3332      	adds	r3, #50	; 0x32
 8000fe6:	4a09      	ldr	r2, [pc, #36]	; (800100c <LL_USART_SetBaudRate+0x168>)
 8000fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fec:	095b      	lsrs	r3, r3, #5
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	f003 030f 	and.w	r3, r3, #15
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	440b      	add	r3, r1
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	609a      	str	r2, [r3, #8]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	51eb851f 	.word	0x51eb851f

08001010 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ff06 	bl	8000e34 <LL_USART_IsEnabled>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d149      	bne.n	80010c2 <LL_USART_Init+0xb2>
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
#if defined(USART_CR1_OVER8)
    MODIFY_REG(USARTx->CR1,
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001036:	f023 030c 	bic.w	r3, r3, #12
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	6851      	ldr	r1, [r2, #4]
 800103e:	683a      	ldr	r2, [r7, #0]
 8001040:	68d2      	ldr	r2, [r2, #12]
 8001042:	4311      	orrs	r1, r2
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	6912      	ldr	r2, [r2, #16]
 8001048:	4311      	orrs	r1, r2
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	6992      	ldr	r2, [r2, #24]
 800104e:	430a      	orrs	r2, r1
 8001050:	431a      	orrs	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	4619      	mov	r1, r3
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff fefc 	bl	8000e5a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	4619      	mov	r1, r3
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff08 	bl	8000e7e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fe20 	bl	8000cb8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a14      	ldr	r2, [pc, #80]	; (80010cc <LL_USART_Init+0xbc>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d102      	bne.n	8001086 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	61bb      	str	r3, [r7, #24]
 8001084:	e00c      	b.n	80010a0 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a11      	ldr	r2, [pc, #68]	; (80010d0 <LL_USART_Init+0xc0>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d102      	bne.n	8001094 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	61bb      	str	r3, [r7, #24]
 8001092:	e005      	b.n	80010a0 <LL_USART_Init+0x90>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <LL_USART_Init+0xc4>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d101      	bne.n	80010a0 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00d      	beq.n	80010c2 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d009      	beq.n	80010c2 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 80010ae:	2300      	movs	r3, #0
 80010b0:	77fb      	strb	r3, [r7, #31]
#if defined(USART_CR1_OVER8)
      LL_USART_SetBaudRate(USARTx,
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	699a      	ldr	r2, [r3, #24]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	69b9      	ldr	r1, [r7, #24]
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff fef1 	bl	8000ea4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80010c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40013800 	.word	0x40013800
 80010d0:	40004400 	.word	0x40004400
 80010d4:	40004800 	.word	0x40004800

080010d8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ea:	4a07      	ldr	r2, [pc, #28]	; (8001108 <LL_InitTick+0x30>)
 80010ec:	3b01      	subs	r3, #1
 80010ee:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <LL_InitTick+0x30>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <LL_InitTick+0x30>)
 80010f8:	2205      	movs	r2, #5
 80010fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000e010 	.word	0xe000e010

0800110c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001114:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ffdd 	bl	80010d8 <LL_InitTick>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001130:	4a03      	ldr	r2, [pc, #12]	; (8001140 <LL_SetSystemCoreClock+0x18>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	20000000 	.word	0x20000000

08001144 <__libc_init_array>:
 8001144:	b570      	push	{r4, r5, r6, lr}
 8001146:	2600      	movs	r6, #0
 8001148:	4d0c      	ldr	r5, [pc, #48]	; (800117c <__libc_init_array+0x38>)
 800114a:	4c0d      	ldr	r4, [pc, #52]	; (8001180 <__libc_init_array+0x3c>)
 800114c:	1b64      	subs	r4, r4, r5
 800114e:	10a4      	asrs	r4, r4, #2
 8001150:	42a6      	cmp	r6, r4
 8001152:	d109      	bne.n	8001168 <__libc_init_array+0x24>
 8001154:	f000 f81a 	bl	800118c <_init>
 8001158:	2600      	movs	r6, #0
 800115a:	4d0a      	ldr	r5, [pc, #40]	; (8001184 <__libc_init_array+0x40>)
 800115c:	4c0a      	ldr	r4, [pc, #40]	; (8001188 <__libc_init_array+0x44>)
 800115e:	1b64      	subs	r4, r4, r5
 8001160:	10a4      	asrs	r4, r4, #2
 8001162:	42a6      	cmp	r6, r4
 8001164:	d105      	bne.n	8001172 <__libc_init_array+0x2e>
 8001166:	bd70      	pop	{r4, r5, r6, pc}
 8001168:	f855 3b04 	ldr.w	r3, [r5], #4
 800116c:	4798      	blx	r3
 800116e:	3601      	adds	r6, #1
 8001170:	e7ee      	b.n	8001150 <__libc_init_array+0xc>
 8001172:	f855 3b04 	ldr.w	r3, [r5], #4
 8001176:	4798      	blx	r3
 8001178:	3601      	adds	r6, #1
 800117a:	e7f2      	b.n	8001162 <__libc_init_array+0x1e>
 800117c:	080011bc 	.word	0x080011bc
 8001180:	080011bc 	.word	0x080011bc
 8001184:	080011bc 	.word	0x080011bc
 8001188:	080011c0 	.word	0x080011c0

0800118c <_init>:
 800118c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118e:	bf00      	nop
 8001190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001192:	bc08      	pop	{r3}
 8001194:	469e      	mov	lr, r3
 8001196:	4770      	bx	lr

08001198 <_fini>:
 8001198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800119a:	bf00      	nop
 800119c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800119e:	bc08      	pop	{r3}
 80011a0:	469e      	mov	lr, r3
 80011a2:	4770      	bx	lr
